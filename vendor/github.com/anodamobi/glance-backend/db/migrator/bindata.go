// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/001_users.sql (1.325kB)
// migrations/002_notification_settings.sql (444B)
// migrations/003_events.sql (527B)
// migrations/004_user_events.sql (297B)
// migrations/005_notifications.sql (539B)
// migrations/006_wellbeing_requests.sql (304B)
// migrations/007_parcels.sql (541B)
// migrations/008_awaiting_parcels.sql (213B)
// migrations/009_maintenance.sql (379B)
// migrations/010_delayed_notifications.sql (463B)
// migrations/011_codes_for_forgotten_pwd.sql (235B)
// migrations/012_admins.sql (881B)

package migrator

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations001_usersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x4f\xa3\x40\x14\x7d\xe7\x57\xdc\x07\x53\xda\xec\xf4\x03\xfa\x61\xbb\xa6\xd9\xa5\x76\x54\x14\x4b\xa5\xe0\xea\x53\x43\x61\xb0\xa3\xc0\xb0\x30\xa8\xdd\x5f\xbf\x81\x51\xc1\x8f\xa8\xf3\x30\x84\xdc\x93\x7b\xcf\x3d\xe7\x64\xda\x6d\xf8\x11\xd1\x9b\xd4\xe5\x04\x9c\x44\x92\x0e\x2d\xac\xd9\x18\x6c\x6d\x66\x60\xd0\x8f\x60\x61\xda\x80\xaf\xf4\x95\xbd\x82\x3c\x23\x69\x26\x35\x25\x00\x00\xea\x43\xed\xcc\xf4\xe3\x15\xb6\x74\xcd\x80\xa5\xa5\x9f\x6b\xd6\x35\x9c\xe1\x6b\x24\x80\x91\x7b\x43\x5e\x80\x97\x9a\x75\x78\xa2\x59\x4d\xb5\xd7\x6b\x89\x7a\x40\xd3\x8c\xaf\x63\x37\x22\xf5\xfa\xb0\xd7\x82\x72\xf4\xc2\x31\x0c\x01\x0c\xdd\x1a\xee\x33\xe0\x0d\xbd\x27\xf1\x47\x1d\x45\x39\x65\x2c\xaa\x98\xeb\x0b\xbb\xfa\x79\xdd\x87\x44\x2e\x0d\xdf\x31\x7f\x35\x10\x9c\x85\x7e\xe1\x60\x81\x4f\xdc\x2c\x7b\x60\xa9\xff\x1a\xaf\xf4\x7a\xad\x37\x8d\x93\x2d\x8b\xdf\x4b\xf2\x42\xd0\x63\x31\xa7\x31\x89\xf9\x57\x8b\x7a\x2c\x8f\x79\xba\xfb\x8c\xe0\x13\x90\xf2\x1d\x7c\xbe\x89\x00\x66\x94\x93\x6f\x01\x37\x21\xf3\xee\xbe\x03\x0c\x42\xc6\xd2\xef\xa8\xcd\x49\x94\xac\x0b\x09\xbf\xea\x48\xb3\xb5\xc8\x0c\xa7\x11\x81\x99\x69\x1a\x58\x5b\xc0\x1c\x1f\x69\x8e\x61\x83\x6d\x3d\xdb\xe1\x93\x7b\xea\x91\xf5\x53\x50\x3f\xb4\x43\x6a\x1d\x48\x92\xbe\x58\x61\xcb\x2e\xa8\x99\x22\xe1\xd0\x2c\x33\x8b\x6a\xd1\x44\x55\xfa\x50\x2d\x5f\xa8\x0c\x13\x12\x49\x41\x2f\x01\x40\xc2\x61\x54\x39\x89\x9e\xbd\x42\xa5\x17\x82\xe0\x9b\x53\x68\x8f\x84\xb0\x48\xc8\x86\x2a\x51\x50\xb5\x4e\x4b\xba\xd4\x0c\x07\xaf\xa0\x29\x6f\x39\x4f\xb2\x9f\xdd\x6e\xc9\x37\xeb\xe4\x71\x96\x84\x6e\xb6\xed\x78\x2c\xea\x26\x5b\xc6\x59\x5b\x19\x8e\x06\xe3\xf1\x64\x32\x1c\xed\xab\xe3\xf6\x24\xe8\x93\x81\xeb\x8f\x86\x83\xc9\xf8\x17\x7d\x0c\xe9\x66\x9a\x6e\xda\x4a\x47\xed\x28\x0d\xfa\x48\xfd\x29\xd9\x9d\x6e\xbd\x93\x59\xe0\xfe\xb9\xa0\xe6\x2d\xde\x9d\xcf\xfd\x49\xc3\xcd\x39\x9b\x06\x2c\x8d\x5c\xde\x08\x28\x9f\x7a\x29\x4b\x1a\x0f\x53\x55\xe9\x0f\x1a\x7f\xa7\xe3\x9e\x5c\xad\x23\x9f\xb2\x6d\x2c\x23\x90\xe7\x8c\x14\x1f\x19\x41\x5f\x51\x11\xc8\x9c\x64\xfc\x77\x29\x53\x41\xae\x28\xed\xa9\xee\x9e\xd2\xdb\x0b\x2e\x3a\x9b\x7f\xf3\xf1\xdd\xca\xb5\xbd\xb1\x39\x9a\x2d\xaf\x82\x25\xe9\xe0\xc3\xdc\xbc\x54\xfb\xbe\x37\xcc\xd5\x7d\x75\x79\x76\xcb\xc2\x61\x77\xff\xd8\xbb\xbb\x8e\x7d\xe6\xed\x44\xeb\x6a\x2a\xce\x53\x96\x94\x03\x9d\xb3\xe2\x36\x58\xec\xb3\x92\xc7\xe8\xa8\xb8\x15\x75\x26\x23\x18\x22\x90\x97\x4f\x16\x29\x65\x8b\xc2\xfe\xfa\xfb\x37\x67\x0f\xb1\x24\xcd\x2d\x73\x59\xbd\x7f\xf5\xb7\xef\xe0\x7f\x00\x00\x00\xff\xff\x19\xc8\x86\xc5\x2d\x05\x00\x00")

func migrations001_usersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations001_usersSql,
		"migrations/001_users.sql",
	)
}

func migrations001_usersSql() (*asset, error) {
	bytes, err := migrations001_usersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/001_users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0x0, 0x1d, 0xaf, 0x5a, 0xf7, 0x4d, 0xdc, 0xc6, 0x10, 0xac, 0x6, 0x67, 0x23, 0x87, 0x7b, 0x83, 0xc5, 0x4c, 0x5d, 0xd0, 0x4e, 0x9b, 0xd6, 0xf4, 0x6b, 0xbf, 0xd5, 0x3, 0x6f, 0x10, 0x9c}}
	return a, nil
}

var _migrations002_notification_settingsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xd0\xc1\x6a\x83\x40\x10\xc6\xf1\xfb\x3c\xc5\x1c\x5b\xda\x3c\x41\x4e\x5a\x37\x45\x58\xb4\x98\x15\x7a\x93\x8d\x99\xca\xc0\x64\x0c\x3a\x36\xaf\x5f\x48\x0f\x29\xcd\xc6\x3d\xef\xef\x1b\xf8\x6f\x36\xf8\x72\xe2\x61\x8a\x46\xd8\x9e\x01\xde\x1a\x97\x05\x87\x21\xcb\xbd\xc3\x72\x87\x55\x1d\xd0\x7d\x96\xfb\xb0\x47\x1d\x8d\xbf\xb8\x8f\xc6\xa3\x76\x33\x99\xb1\x0e\x33\x3c\x01\x22\xe2\x32\xd3\xd4\xf1\x11\x13\x2f\x2f\xdf\xcb\x2a\x5c\x87\xaa\xd6\xfb\xd7\xeb\xff\x28\xd2\x45\x91\xf1\x42\x77\x26\xaf\x6b\xef\xb2\x0a\x0b\xb7\xcb\x5a\x1f\x30\x34\xad\xfb\x45\xe7\x38\xf5\x24\x73\x0a\x3e\x46\xf4\x4d\x6a\x49\xb3\x82\x0e\x0b\xcb\x91\x75\xe8\x0e\x8b\x08\x19\xeb\x6d\xe0\x31\x3a\x45\x56\x23\x8d\xda\xd3\xff\x73\x29\x04\xcf\x5b\x80\xbf\xf9\x8b\xf1\xa2\x00\x45\x53\x7f\xdc\xf2\xaf\xa5\xdf\xfe\x04\x00\x00\xff\xff\x42\x89\x34\x1c\xbc\x01\x00\x00")

func migrations002_notification_settingsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations002_notification_settingsSql,
		"migrations/002_notification_settings.sql",
	)
}

func migrations002_notification_settingsSql() (*asset, error) {
	bytes, err := migrations002_notification_settingsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/002_notification_settings.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe0, 0x36, 0x80, 0xbf, 0x2c, 0x78, 0xc4, 0x58, 0x96, 0x1, 0x83, 0x32, 0x5, 0xed, 0x3d, 0xee, 0x98, 0x9d, 0xee, 0xd2, 0xcf, 0x56, 0xd1, 0x44, 0x47, 0xca, 0xb9, 0xd1, 0x5a, 0x14, 0xd3, 0xac}}
	return a, nil
}

var _migrations003_eventsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3f\x6b\xc3\x30\x14\xc4\x77\x7d\x8a\x37\x26\xb4\x01\x77\xe8\x94\x49\x8e\xe5\x56\x54\xfe\x83\x2c\x97\x66\x32\xc2\x7e\x04\x81\x63\x19\xfb\xd1\x34\xdf\xbe\x24\x6d\x13\xbb\xd0\x92\x37\x69\xf8\x71\x77\xba\x5b\xad\xe0\x6e\xef\x76\x83\x25\x84\xb2\x67\x6c\xa3\x05\x37\x02\x0c\x0f\x95\x00\x19\x43\x9a\x19\x10\x6f\xb2\x30\x05\xe0\x3b\x76\x34\xb2\x05\x03\x00\x70\x0d\xcc\x2f\x94\x4f\x85\xd0\x92\x2b\xc8\xb5\x4c\xb8\xde\xc2\x8b\xd8\xde\x9f\x59\x72\xd4\xe2\x94\x7d\xe5\x7a\xf3\xcc\xf5\xe2\x31\x58\x9e\x0d\xd2\x52\xa9\x2f\xb4\x39\xe5\x98\x9e\x91\x89\x28\x0c\x4f\x72\x80\x5f\x68\xeb\x6b\x4b\xce\x77\x37\xa8\xd6\x96\x70\xe7\x87\xe3\x05\x95\xa9\xb9\xbc\xe7\x28\x1d\xfb\x79\x80\xbf\x51\xdf\x63\x57\x91\xbf\xe5\x5b\x7b\xfb\x51\x59\x22\xec\x1a\xc4\xf1\x7f\x55\x37\x56\x07\xeb\xa8\x75\x23\x55\x27\x07\x08\xb3\x4c\x09\x9e\x42\x24\x62\x5e\x2a\x03\x31\x57\x85\xf8\x6e\x0b\xc7\x7a\x70\xfd\xb5\x85\x9f\x04\x0f\x41\x10\x04\x4b\xb6\x5c\x33\x36\x1d\x38\xf2\x87\x8e\xb1\x48\x67\xf9\x75\xe0\xd9\xb8\xeb\xcf\x00\x00\x00\xff\xff\x83\x25\xa2\x41\x0f\x02\x00\x00")

func migrations003_eventsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations003_eventsSql,
		"migrations/003_events.sql",
	)
}

func migrations003_eventsSql() (*asset, error) {
	bytes, err := migrations003_eventsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/003_events.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x7f, 0x85, 0x2f, 0x57, 0x65, 0x71, 0x9a, 0x47, 0x94, 0x78, 0x9b, 0xa5, 0x4b, 0xa9, 0x84, 0xa6, 0xc9, 0x23, 0xe3, 0xaa, 0x7d, 0xe6, 0x1e, 0x28, 0x14, 0x6c, 0x24, 0x61, 0x7f, 0xa7, 0xc1}}
	return a, nil
}

var _migrations004_user_eventsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x6a\x03\x21\x14\x45\xf7\xef\x2b\xee\x32\xa1\xcd\x17\x64\xe5\x64\x9e\x45\x6a\x35\xa8\x03\xcd\x6a\x18\x50\x8a\x8b\xa6\x25\x9a\xf4\xf7\x8b\xe3\x22\x81\xbc\xed\x3d\xef\x5e\xce\x6e\x87\x97\xef\xfc\x75\x59\x6a\xc2\xf4\x4b\x74\x70\x2c\x02\x23\x88\x41\x33\x94\x84\xb1\x01\xfc\xa9\x7c\xf0\xb8\x96\x74\x99\xd3\x2d\x9d\x6b\xa1\x0d\x01\x40\x8e\xe8\x37\xa8\x37\xcf\x4e\x09\x8d\xa3\x53\x1f\xc2\x9d\xf0\xce\xa7\xd7\x95\x59\x1f\xe6\x1c\x1b\xa3\x4c\x80\x63\xc9\x8e\xcd\x81\x7d\x8f\x0a\x36\x39\x6e\x3b\xbb\x2e\xb4\xd2\x67\xb6\x45\x8f\x68\x2e\x73\x59\x6e\x29\x62\xb0\x56\xb3\x30\x18\x59\x8a\x49\x07\x48\xa1\x3d\x77\xa6\xd4\xa5\x5e\x0b\x80\xd6\xd5\x44\xcc\xa4\x35\x6d\xf7\x44\x8f\xd6\xe3\xcf\xdf\x99\x68\x74\xf6\x78\xb7\x7e\x36\xde\xff\x07\x00\x00\xff\xff\x0e\x99\x4a\xcf\x29\x01\x00\x00")

func migrations004_user_eventsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations004_user_eventsSql,
		"migrations/004_user_events.sql",
	)
}

func migrations004_user_eventsSql() (*asset, error) {
	bytes, err := migrations004_user_eventsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/004_user_events.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7b, 0x52, 0xd7, 0xcc, 0x29, 0x2e, 0xa8, 0x38, 0x80, 0xa5, 0xae, 0x4, 0x65, 0x2b, 0xbb, 0x46, 0xca, 0x8b, 0xfa, 0xd6, 0xe6, 0x17, 0x61, 0x4a, 0x1e, 0xc2, 0xa4, 0xf6, 0xfa, 0x40, 0x54, 0x95}}
	return a, nil
}

var _migrations005_notificationsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x51\x6b\xb3\x30\x18\x85\xef\xf3\x2b\xce\x65\xe5\xfb\x0a\x6e\xb0\xab\x5e\xa5\xf6\x75\x0b\x53\x2b\x31\x8e\xf5\xaa\x38\xcd\x46\xa0\x4b\x8a\xa6\x0c\xff\xfd\xa0\xd5\x75\x88\xa3\xb9\xcd\x93\x93\x73\x78\x96\x4b\xfc\xfb\x34\x1f\x6d\xe5\x35\xca\x23\x63\x91\x24\xae\x08\x8a\xaf\x13\x82\x88\x91\x6d\x15\xe8\x55\x14\xaa\x80\x75\xde\xbc\x9b\xba\xf2\xc6\xd9\x8e\x2d\x18\x00\x98\x06\xe3\x59\x8b\xc7\x82\xa4\xe0\x09\x72\x29\x52\x2e\x77\x78\xa6\xdd\xff\x33\xe5\xfb\xa3\x1e\xa8\x17\x2e\xa3\x27\x2e\x17\x0f\x61\x00\x9c\xd3\xb3\x32\x49\x06\xcc\xf8\x83\xbe\x8d\xbd\xb9\xa6\x9f\xa4\xdd\x85\x61\x18\x4c\xb0\xba\xd5\x95\xd7\xcd\xbe\xf2\x50\x22\xa5\x42\xf1\x34\xc7\x86\x62\x5e\x26\x0a\x51\x29\x25\x65\x6a\xff\x73\x73\x79\xd3\x69\xdb\xe8\x76\x9c\x23\x32\x35\x8e\x1b\xa3\x21\x29\x26\x49\x59\x44\x05\x4e\x9d\x6e\x3b\x2c\x4c\x13\x0c\x1f\x3a\xeb\x8d\xd5\xd6\x5f\x7b\xdd\xcf\xd4\xaf\xdd\xc9\xfa\xb6\xbf\xb5\xb2\x36\x7e\xba\x72\x2e\xed\xe0\x2e\x42\xfe\xc4\x58\xb0\x62\xec\xb7\xe5\x8d\xfb\xb2\x8c\x6d\xe4\x36\xbf\x5a\x9e\x33\xbc\xfa\x0e\x00\x00\xff\xff\xf0\x01\xba\xbf\x1b\x02\x00\x00")

func migrations005_notificationsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations005_notificationsSql,
		"migrations/005_notifications.sql",
	)
}

func migrations005_notificationsSql() (*asset, error) {
	bytes, err := migrations005_notificationsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/005_notifications.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2e, 0x5c, 0xf1, 0x83, 0x9e, 0xde, 0x2c, 0x34, 0x36, 0xc3, 0xf3, 0x26, 0xd5, 0x20, 0xe5, 0xcc, 0x4c, 0x9d, 0x3f, 0x3a, 0xc7, 0xee, 0x3d, 0x4f, 0x2d, 0xdf, 0x75, 0x33, 0x2e, 0xbb, 0xa8, 0xe4}}
	return a, nil
}

var _migrations006_wellbeing_requestsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x4e\xc3\x30\x14\x45\x77\x7f\xc5\x1d\x5b\x41\xbf\xa0\x93\x93\xbc\x54\x16\x8e\x13\xd9\x8e\x44\x27\x2b\x90\xa7\xca\x52\x68\xc1\x4e\xe9\xef\x23\x35\x28\xb0\xf4\xae\xf7\x9c\xe1\xec\x76\x78\xfa\x88\xa7\x34\xcc\x8c\xfe\x53\x88\xd2\x92\xf4\x04\x2f\x0b\x4d\x50\x35\x4c\xeb\x41\xaf\xca\x79\x87\x1b\x4f\xd3\x1b\xc7\xf3\x29\x24\xfe\xba\x72\x9e\xb3\xd8\x08\x00\x88\x23\xd6\x15\xea\xe0\xc8\x2a\xa9\xd1\x59\xd5\x48\x7b\xc4\x0b\x1d\x9f\xef\xd8\x35\x73\x0a\xbf\x6c\xa1\x0e\xca\x78\x58\xaa\xc9\x92\x29\xc9\xdd\xdf\x8c\x4d\x1c\xb7\x0b\xfd\x9e\x78\x98\x79\x0c\xc3\x0c\x78\xd5\x90\xf3\xb2\xe9\x50\x51\x2d\x7b\xed\x51\xf6\xd6\x92\xf1\x61\x7d\x16\x29\xe6\x90\x38\x5f\xa6\x6f\x1e\x51\xb4\xad\x26\x69\x80\x55\xaa\xa5\x76\x24\xb6\x7b\x21\xfe\x57\x57\x97\xdb\x59\x88\xca\xb6\xdd\x5f\xf5\xc3\xe2\xfd\x4f\x00\x00\x00\xff\xff\x06\x41\x75\x3e\x30\x01\x00\x00")

func migrations006_wellbeing_requestsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations006_wellbeing_requestsSql,
		"migrations/006_wellbeing_requests.sql",
	)
}

func migrations006_wellbeing_requestsSql() (*asset, error) {
	bytes, err := migrations006_wellbeing_requestsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/006_wellbeing_requests.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x97, 0x69, 0xee, 0x56, 0x1f, 0xff, 0xe5, 0x7, 0x10, 0xbd, 0x9d, 0xb1, 0xb, 0x51, 0xf9, 0xf8, 0x75, 0x68, 0x7e, 0x33, 0xf1, 0x14, 0x79, 0x4a, 0x39, 0x26, 0x47, 0xbc, 0x91, 0xfc, 0xdc}}
	return a, nil
}

var _migrations007_parcelsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x4f\x83\x30\x14\xc7\xef\xfd\x14\xef\x38\xa2\x4b\xf0\xbc\x53\x07\x8f\xd9\x08\x8c\x94\x62\xdc\xa9\x69\xa0\x9a\x26\x40\x49\xe9\xd4\x7d\x7b\xb3\x11\x37\x21\x31\xc6\x77\xed\xef\xd7\xf6\xff\xfe\xeb\x35\xdc\x75\xe6\xcd\x29\xaf\xa1\x1a\x08\x89\x38\x52\x81\x20\xe8\x36\x45\x60\x09\xe4\x7b\x01\xf8\xc2\x4a\x51\xc2\xa0\x5c\xad\xdb\x91\xac\x08\x00\x80\x69\x60\x39\x5b\xb6\x2b\x91\x33\x9a\x42\xc1\x59\x46\xf9\x01\x9e\xf0\x70\x7f\xa1\x8f\xa3\x76\x72\xae\x6c\xd9\x8e\xe5\x02\x38\x26\xc8\x31\x8f\xb0\xbc\x40\x23\xac\x4c\x13\x4c\x92\xb3\xb6\x5b\x3c\x71\x36\x6e\x73\xfe\x5c\x5e\xa5\xe9\x84\x37\xba\x35\xef\xda\x9d\x64\x6d\xbb\x41\xf5\x27\x00\x78\xa6\x3c\x7a\xa4\x7c\xf5\x10\x86\xc1\x12\x9f\xe2\xc8\xd6\xd6\xca\x1b\xdb\xc3\x1f\x78\x6f\xbd\x79\x35\x13\x2b\xbd\xf1\xad\xfe\x07\xae\x3f\xfd\xec\xf6\x30\x58\xe0\xb5\xd3\xca\xeb\x46\x2a\x7f\x0d\x27\x58\x86\xa5\xa0\x59\x01\x31\x26\xb4\x4a\x05\x44\x15\xe7\x98\x0b\x79\x3d\x99\xdc\xd1\x2b\x7f\x1c\x7f\x59\xd3\xb7\x1b\x92\x60\x43\xc8\xcf\xb6\x63\xfb\xd1\x13\x12\xf3\x7d\x71\x6b\x7b\xde\xf4\xe6\x2b\x00\x00\xff\xff\x03\x0f\xe0\x98\x1d\x02\x00\x00")

func migrations007_parcelsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations007_parcelsSql,
		"migrations/007_parcels.sql",
	)
}

func migrations007_parcelsSql() (*asset, error) {
	bytes, err := migrations007_parcelsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/007_parcels.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x7b, 0x63, 0x88, 0x94, 0x7f, 0x89, 0xa2, 0x10, 0xab, 0xe, 0x86, 0xa6, 0xce, 0x7e, 0x1d, 0xff, 0xa4, 0x66, 0x38, 0x38, 0x76, 0x18, 0x32, 0xe6, 0x2b, 0xc0, 0xbe, 0x41, 0x3e, 0x2c, 0x7c}}
	return a, nil
}

var _migrations008_awaiting_parcelsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xce\xc1\x6a\x84\x30\x14\x85\xe1\xfd\x7d\x8a\xb3\x54\x5a\x9f\xc0\x55\xd4\x6b\x09\xd5\x28\x49\x84\xba\x92\x50\x83\x84\x56\x2b\x36\xe0\xeb\x17\xec\xc0\xcc\x66\xce\xfe\xe7\x7c\x59\x86\x97\x35\x2c\x87\x8b\x1e\xc3\x4e\x54\x6a\x16\x96\x61\x45\xd1\x30\x64\x0d\xd5\x59\xf0\x87\x34\xd6\xc0\x9d\x2e\xc4\xb0\x2d\xd3\xee\x8e\x4f\xff\xfd\x4b\x09\x01\xc0\x1e\x66\xfc\xaf\x90\x6f\x52\x59\xf4\x5a\xb6\x42\x8f\x78\xe7\x11\x9a\x6b\xd6\xac\x4a\x36\xb8\x55\x48\xc2\x9c\xbe\x5e\x65\x74\x5f\x7e\x8a\x61\xf5\xb0\xb2\x65\x63\x45\xdb\x5f\x7f\x6a\x68\x1a\x4a\x73\xa2\x47\x5c\xf5\x73\x6e\x44\x95\xee\xfa\x3b\xee\x09\x2c\xff\x0b\x00\x00\xff\xff\x84\x98\xd3\x07\xd5\x00\x00\x00")

func migrations008_awaiting_parcelsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations008_awaiting_parcelsSql,
		"migrations/008_awaiting_parcels.sql",
	)
}

func migrations008_awaiting_parcelsSql() (*asset, error) {
	bytes, err := migrations008_awaiting_parcelsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/008_awaiting_parcels.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0xeb, 0x32, 0xd8, 0x8a, 0xc3, 0xd2, 0xc7, 0x1b, 0xef, 0x9, 0x11, 0x6c, 0x71, 0x6a, 0xdf, 0x74, 0x84, 0x29, 0xfe, 0xb9, 0x30, 0x81, 0x4d, 0x4e, 0x7a, 0xa6, 0x95, 0x8d, 0x47, 0x80, 0xbe}}
	return a, nil
}

var _migrations009_maintenanceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x51\x6b\xb3\x30\x18\x85\xef\xf3\x2b\xce\x65\xe5\xfb\x0a\x8e\x5d\xf6\x2a\xea\x6b\x17\xa6\xa9\x8b\xc9\x58\x19\x43\x82\x86\x92\x0b\xd3\x4e\x2d\xfb\xfb\x83\x5a\x9c\x6c\xef\xed\x79\x78\xcf\xe1\xd9\x6e\xf1\xaf\xf7\xa7\xc1\x4e\x0e\xe6\xc2\x58\xaa\x88\x6b\x82\xe6\x49\x41\x10\x39\xe4\x41\x83\xde\x44\xad\x6b\xf4\xd6\x87\xc9\x05\x1b\x5a\xc7\x36\x0c\x00\x7c\x87\xe5\x12\xb1\xaf\x49\x09\x5e\xa0\x52\xa2\xe4\xea\x88\x67\x3a\xfe\x9f\xb1\xde\x9e\xdc\x38\x63\xaf\x5c\xa5\x4f\x5c\x6d\x1e\xe2\x38\x7a\xff\xb8\xbd\x97\xa6\x28\x66\xb0\x73\x63\x3b\xf8\xcb\xe4\xcf\x61\x01\x1f\xe3\x38\x02\x7e\x81\xd7\xd1\x0d\xcd\xbd\x3d\x11\x7b\x21\x35\x14\xe5\xa4\x48\xa6\x54\xdf\xd2\x11\x1b\xdf\x45\x33\xdd\x0e\xce\x4e\xae\x6b\xec\x04\x68\x51\x52\xad\x79\x59\x21\xa3\x9c\x9b\x42\x23\x35\x4a\x91\xd4\xcd\x92\xdc\x2b\x82\xff\xbc\xba\xb9\x64\x3d\x7a\xb5\x05\x46\x8a\x17\x43\x2c\xda\x31\xb6\xf6\x98\x9d\xbf\x02\x63\x99\x3a\x54\x3f\x1e\xff\x3a\xdc\x7d\x07\x00\x00\xff\xff\x4a\x9e\xdb\xd1\x7b\x01\x00\x00")

func migrations009_maintenanceSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations009_maintenanceSql,
		"migrations/009_maintenance.sql",
	)
}

func migrations009_maintenanceSql() (*asset, error) {
	bytes, err := migrations009_maintenanceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/009_maintenance.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0xb8, 0x3, 0x67, 0x17, 0x76, 0x92, 0x41, 0x78, 0x5e, 0xac, 0x8e, 0x32, 0x64, 0x30, 0x1a, 0x2e, 0x67, 0x4d, 0xbf, 0xe9, 0x5d, 0x9b, 0x37, 0xbc, 0x86, 0x16, 0x53, 0x3b, 0x96, 0x47, 0x84}}
	return a, nil
}

var _migrations010_delayed_notificationsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x5d\x4f\xc2\x30\x18\x85\xef\xfb\x2b\xce\x9d\x10\x59\x32\xbd\x25\x5c\x14\xa8\xda\x38\x60\xe9\x8a\x91\xab\x65\x59\x5f\xb4\xc9\xb6\x9a\xad\x62\xf8\xf7\xa6\x4e\x3e\x24\xc4\xf7\xfa\xec\x39\xcf\x7a\xa2\x08\xb7\xb5\x7d\x6b\x0b\x4f\x58\x7f\x30\x36\x53\x82\x6b\x01\xcd\xa7\x89\x80\x7c\xc0\x72\xa5\x21\x5e\x65\xa6\x33\x18\xaa\x8a\x3d\x99\xbc\x71\xde\x6e\x6d\x59\x78\xeb\x9a\x8e\x0d\x18\x00\x58\x83\xf3\x9b\xca\xc7\x4c\x28\xc9\x13\xa4\x4a\x2e\xb8\xda\xe0\x59\x6c\x46\x3f\xc9\x28\x82\xdd\x82\x76\xd4\xf8\xdc\x1a\x4c\x26\x88\x47\xf0\xef\xb6\x43\x4b\xa5\x6b\x0d\x8c\xa3\xae\xb9\xf1\x68\xa9\x0a\x52\xde\xf5\x61\xfc\xad\x0d\xa8\x23\xe4\x58\x2a\x97\xfa\xa0\x10\xc4\x97\xeb\x24\xe9\x5b\x3f\x3b\x6a\x73\x43\x3b\x5b\x52\xf8\xe0\x85\xab\xd9\x13\x57\x83\xfb\x38\x1e\x5e\x46\xbd\xad\x29\xf7\xae\xff\xcd\x3d\xb4\x5c\x88\x4c\xf3\x45\x7a\x85\x5a\xba\xba\x0e\x6a\xbf\x77\xa0\xde\xc5\x01\x7b\x49\xf5\x15\x9d\x1e\xe8\xba\x00\x1b\x8e\x19\x3b\x5f\x64\xee\xbe\x1a\xc6\xe6\x6a\x95\x9e\x16\xf9\x6f\x8d\xf1\x77\x00\x00\x00\xff\xff\x3d\xa4\xeb\x06\xcf\x01\x00\x00")

func migrations010_delayed_notificationsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations010_delayed_notificationsSql,
		"migrations/010_delayed_notifications.sql",
	)
}

func migrations010_delayed_notificationsSql() (*asset, error) {
	bytes, err := migrations010_delayed_notificationsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/010_delayed_notifications.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xd5, 0xca, 0x29, 0xfd, 0x20, 0xfb, 0x3, 0x33, 0xcc, 0x13, 0x46, 0x78, 0x8d, 0x4d, 0x55, 0x1e, 0x61, 0x55, 0x94, 0xcd, 0x4d, 0xae, 0x35, 0x64, 0xd2, 0xe3, 0x5f, 0xc1, 0x50, 0x6b, 0x10}}
	return a, nil
}

var _migrations011_codes_for_forgotten_pwdSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x8a\x83\x40\x18\x84\xfb\xff\x29\xa6\x54\xee\x04\xaf\xb6\x5a\x75\x2f\x59\xb2\x51\x59\xd7\x10\x2b\x91\xb8\x11\x21\xba\x62\x04\x5f\x3f\x68\x8a\xa4\x08\x29\x66\xaa\x6f\x86\xcf\xf3\xf0\xd3\x77\xed\x54\xcf\x06\xc5\x48\x14\x29\xce\x34\x87\x66\xa1\xe4\x10\xff\x48\x52\x0d\x7e\x16\xb9\xce\x71\xb1\x8d\xb9\x57\x57\x3b\xad\x69\xed\x3c\x9b\xa1\x1a\x97\x86\x1c\x02\x80\xae\x59\x3b\x14\xbb\x9c\x2b\xc1\x24\x32\x25\x8e\x4c\x95\x38\xf0\xf2\x77\x03\xd6\x39\x70\x62\x2a\xda\x33\xe5\xfc\xf9\xbe\xbb\x9d\x27\x85\x94\x4f\xc0\xf4\x75\x77\xfb\x0c\x10\xb9\x01\xd1\xbb\x6b\x6c\x97\x81\x28\x56\x69\xf6\x72\xfd\xee\x19\x3c\x02\x00\x00\xff\xff\x96\x83\x71\xb6\xeb\x00\x00\x00")

func migrations011_codes_for_forgotten_pwdSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations011_codes_for_forgotten_pwdSql,
		"migrations/011_codes_for_forgotten_pwd.sql",
	)
}

func migrations011_codes_for_forgotten_pwdSql() (*asset, error) {
	bytes, err := migrations011_codes_for_forgotten_pwdSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/011_codes_for_forgotten_pwd.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x56, 0xa1, 0xd1, 0x26, 0x12, 0x88, 0xe4, 0x6, 0x7a, 0xf3, 0x84, 0xf6, 0x34, 0xa0, 0xb9, 0xfd, 0x81, 0x8e, 0xa6, 0xd7, 0x75, 0xdc, 0xc2, 0xaa, 0x3d, 0xb5, 0xcf, 0x7a, 0x47, 0x5f, 0x72, 0xa3}}
	return a, nil
}

var _migrations012_adminsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xd3\x41\x6b\xfa\x30\x18\x06\xf0\x7b\x3e\xc5\x7b\x54\xfe\x7f\x2f\x03\x4f\x9e\xa2\x66\x5b\x59\xa7\x12\xe3\x50\xc6\x90\xcc\xbe\xba\x17\x9a\x54\x92\x60\xd9\xb7\x1f\x74\x63\x5b\xdb\x10\x59\x6f\x85\xfc\x78\x92\x07\x9e\xd1\x08\xfe\x19\x3a\x39\x1d\x10\x36\x67\xc6\x66\x52\x70\x25\x40\xf1\x69\x2e\x20\xbb\x85\xc5\x52\x81\xd8\x66\x6b\xb5\x06\x5d\x18\xb2\x9e\x0d\x18\x00\x00\x15\x10\xff\xa6\xd9\xdd\x5a\xc8\x8c\xe7\xb0\x92\xd9\x23\x97\x3b\x78\x10\xbb\xff\x8d\x39\x92\xf3\x61\x6f\xb5\xc1\x8e\x79\xe2\x72\x76\xcf\xe5\xe0\x66\x3c\x1e\x36\x89\x8b\x4d\x9e\x7f\x9a\x52\xc7\x49\xca\xa0\xd1\x54\xc6\xee\x96\x30\x64\xf4\xa9\x97\x71\xc5\x9c\xb5\xf7\x75\xe5\xfa\x4d\x24\x8c\xa7\x80\xfb\x33\x3a\x43\xde\x53\x65\xfd\xb7\x51\x62\xab\x9e\x5f\xbe\x7e\xda\xa6\x29\x3e\x86\x12\xc6\xa1\xa7\x02\x6d\xe8\xb1\x84\x39\xbc\xe9\xfe\xf9\x2b\xa6\xc0\x92\x2e\xe8\xde\xff\x92\x63\x34\xd9\x80\x56\xdb\x43\xa7\x8a\x84\xa9\xb1\x2c\x5f\x91\xec\xa9\x1b\x94\x30\x78\x41\x1b\x7c\xe4\x45\x09\x63\xab\x40\x47\x3a\xe8\x40\x55\xbb\xf2\xa8\x61\xc3\x09\x63\xbf\x27\x34\xaf\x6a\xcb\xd8\x5c\x2e\x57\x3f\x13\x6a\xcd\x67\xf2\x11\x00\x00\xff\xff\xb6\x9e\x06\xd8\x71\x03\x00\x00")

func migrations012_adminsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations012_adminsSql,
		"migrations/012_admins.sql",
	)
}

func migrations012_adminsSql() (*asset, error) {
	bytes, err := migrations012_adminsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/012_admins.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x30, 0xc5, 0xc8, 0xfe, 0x77, 0x38, 0x3a, 0xf1, 0x71, 0xc8, 0xc6, 0xd3, 0x9c, 0x65, 0x8d, 0xd6, 0x21, 0x1e, 0x28, 0xb, 0x49, 0x97, 0xef, 0x90, 0xf2, 0xd, 0x39, 0x27, 0xfd, 0xf4, 0xfa, 0x5e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/001_users.sql": migrations001_usersSql,

	"migrations/002_notification_settings.sql": migrations002_notification_settingsSql,

	"migrations/003_events.sql": migrations003_eventsSql,

	"migrations/004_user_events.sql": migrations004_user_eventsSql,

	"migrations/005_notifications.sql": migrations005_notificationsSql,

	"migrations/006_wellbeing_requests.sql": migrations006_wellbeing_requestsSql,

	"migrations/007_parcels.sql": migrations007_parcelsSql,

	"migrations/008_awaiting_parcels.sql": migrations008_awaiting_parcelsSql,

	"migrations/009_maintenance.sql": migrations009_maintenanceSql,

	"migrations/010_delayed_notifications.sql": migrations010_delayed_notificationsSql,

	"migrations/011_codes_for_forgotten_pwd.sql": migrations011_codes_for_forgotten_pwdSql,

	"migrations/012_admins.sql": migrations012_adminsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"001_users.sql":                   &bintree{migrations001_usersSql, map[string]*bintree{}},
		"002_notification_settings.sql":   &bintree{migrations002_notification_settingsSql, map[string]*bintree{}},
		"003_events.sql":                  &bintree{migrations003_eventsSql, map[string]*bintree{}},
		"004_user_events.sql":             &bintree{migrations004_user_eventsSql, map[string]*bintree{}},
		"005_notifications.sql":           &bintree{migrations005_notificationsSql, map[string]*bintree{}},
		"006_wellbeing_requests.sql":      &bintree{migrations006_wellbeing_requestsSql, map[string]*bintree{}},
		"007_parcels.sql":                 &bintree{migrations007_parcelsSql, map[string]*bintree{}},
		"008_awaiting_parcels.sql":        &bintree{migrations008_awaiting_parcelsSql, map[string]*bintree{}},
		"009_maintenance.sql":             &bintree{migrations009_maintenanceSql, map[string]*bintree{}},
		"010_delayed_notifications.sql":   &bintree{migrations010_delayed_notificationsSql, map[string]*bintree{}},
		"011_codes_for_forgotten_pwd.sql": &bintree{migrations011_codes_for_forgotten_pwdSql, map[string]*bintree{}},
		"012_admins.sql":                  &bintree{migrations012_adminsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
