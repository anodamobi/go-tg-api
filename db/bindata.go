// Code generated by go-bindata.
// sources:
// migrations/users.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationsUsersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x4f\xeb\x30\x10\x84\xef\xfe\x15\xa3\x9e\x12\xbd\x17\xe9\x3d\x09\x0e\xd0\x53\x68\x5c\x88\x08\x4e\x71\x1d\x68\x4f\xd1\xaa\x36\xc6\xa8\x71\xa2\xc4\x29\xfc\x7c\x94\x22\x95\xc2\x71\x67\x3e\xed\xec\x4e\x92\xe0\x4f\xe3\x6c\x4f\xc1\xa0\xea\x18\x5b\x48\x9e\x2a\x0e\xbe\x51\x5c\xac\xf3\x52\x20\x5f\x42\x94\x0a\x7c\x93\xaf\xd5\x1a\xb3\x71\x74\x3a\x69\x87\xa1\x9b\xcd\x4f\xb0\x4a\x6f\x0a\x8e\x71\x30\xfd\x10\x31\xc0\x69\x4c\x14\x32\xbe\x4c\xab\x42\x1d\x87\xda\x1a\x6f\xa6\x90\xfa\x70\x81\x28\xfe\xcb\x00\xf3\x11\x4c\xef\x69\x5f\x3b\x8d\x5c\x28\x7e\xcb\xe5\x31\x49\x54\x45\x81\x4a\xe4\x8f\x15\x9f\x30\x4f\x8d\x81\xe2\x1b\x75\x32\x27\x35\x49\xa0\xca\xac\xbc\xc6\xee\x95\xbc\x35\xa0\xdd\xae\xed\xb5\xf3\x16\xa1\x45\xce\xd5\x12\x7b\xf2\x76\x24\x6b\x10\xc8\x62\x08\xe4\x35\xf5\x9a\xe1\x5b\x7f\x4a\xe5\xe2\x2e\x95\xd1\xff\x7f\xf1\x8f\xd5\x74\xa0\x40\xfd\xc9\xbe\xbc\x3a\x5e\xfb\xd6\x3a\x6f\x74\x4d\x01\xc1\x35\x66\x08\xd4\x74\xd0\xe6\x85\xc6\x7d\x80\x28\x9f\xbf\x5e\x1a\x3b\x4d\xe1\x17\x35\xe9\x2b\x99\x3f\xa4\x72\x8b\x7b\xbe\x45\xe4\x74\xcc\xe2\x39\x63\xe7\xcd\x67\xed\xbb\x67\x2c\x93\xe5\xea\xbc\xcc\xf9\x67\x00\x00\x00\xff\xff\x21\xcd\xf1\x41\x9d\x01\x00\x00")

func migrationsUsersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsUsersSql,
		"migrations/users.sql",
	)
}

func migrationsUsersSql() (*asset, error) {
	bytes, err := migrationsUsersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/users.sql": migrationsUsersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"users.sql": &bintree{migrationsUsersSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
