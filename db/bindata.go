// Code generated by go-bindata.
// sources:
// migrations/users.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrationsUsersSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x4a\xf3\x40\x14\x46\xf7\xf3\x14\x1f\x5d\x25\xfc\x7f\xa0\x82\x2b\xbb\x8a\xcd\x14\x83\x31\x29\xe9\x54\xdb\x55\xb8\x74\xae\xe3\x48\x33\x09\xc9\x8c\xfa\xf8\x92\x0a\xb6\x75\x79\x0f\x07\xce\xe5\x4b\x12\xfc\x6b\xad\x19\xc8\x33\xb6\xbd\x10\xcb\x5a\xa6\x4a\x42\xee\x94\x2c\x37\x79\x55\x22\x5f\xa1\xac\x14\xe4\x2e\xdf\xa8\x0d\x66\x21\x58\x9d\x74\xe3\xd8\xcf\x16\xbf\xb2\x4a\xef\x0b\x89\x30\xf2\x30\x46\x02\xb0\x1a\x93\x85\x4c\xae\xd2\x6d\xa1\x4e\x47\x63\xd8\xf1\x14\x69\x3e\x6e\x11\xc5\xff\x05\xc0\x5f\x9e\x07\x47\xc7\xc6\x6a\x3c\xa7\xf5\xf2\x21\xad\xa3\x9b\xf9\x3c\x3e\xe5\xca\x6d\x51\x4c\x92\xa3\x96\xa1\xe4\x4e\x5d\xd1\x24\x81\xaa\xb2\xea\x0e\x87\x37\x72\x86\x41\x87\x43\x37\x68\xeb\x0c\x7c\x87\x5c\xaa\x15\x8e\xe4\x4c\x20\xc3\xf0\x64\x30\x7a\x72\x9a\x06\x2d\x70\xe6\xe7\xe2\x75\xf0\xbd\xb3\x8e\x75\x43\x1e\xde\xb6\x3c\x7a\x6a\x7b\x68\x7e\xa5\x70\xf4\x28\xab\x97\x9f\xd7\x43\xaf\xc9\xff\xb1\x26\xbe\xae\xf3\xa7\xb4\xde\xe3\x51\xee\x11\x59\x1d\x8b\x78\x21\xc4\xe5\xc2\x59\xf7\xe9\x84\xc8\xea\x6a\x7d\x39\xda\xe2\x3b\x00\x00\xff\xff\xe5\xd7\x4c\xe8\x85\x01\x00\x00")

func migrationsUsersSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrationsUsersSql,
		"migrations/users.sql",
	)
}

func migrationsUsersSql() (*asset, error) {
	bytes, err := migrationsUsersSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/users.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/users.sql": migrationsUsersSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"users.sql": &bintree{migrationsUsersSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
